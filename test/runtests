#!/usr/bin/env bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
# Copyright 2021 Spearhead Systems S.R.L.
#

#
# Run the Cloud API tests. This is expected to be run from the Cloud API
# install dir (i.e. "/opt/smartdc/cloudapi" in the cloudapi zone).
#
# This creates .tap files in the OUTPUT_DIR (/var/tmp/cloudapitest) that
# can be processed by a TAP reader. Testing config and log files are
# also placed in this dir.
#
# Run `./runtests -h` for usage info.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

# With this stuff enabled we'll get not summary at the end of the tests
# execution if any test wrote to stderr.
#set -o errexit
#set -o pipefail

TOP=$(cd $(dirname $0)/../; pwd)
echo $TOP;

#---- guard

if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this install.
EOF
    exit 2
fi


#---- support functions

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function usage
{
    echo "Usage:"
    echo "  runtests [OPTIONS...]"
    echo ""
    echo "Options:"
    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
}



#---- mainline

start_time=$(date +%s)

NODE_INSTALL=$TOP/build/node
PATH=$TOP/build/node/bin:$TOP/node_modules/.bin:$PATH
TAPE=./node_modules/.bin/tap

# Options.
opt_test_pattern=
while getopts "hcqpf:" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

# Setup a clean output dir.
OUTPUT_DIR=/var/tmp/cloudapitest
echo "# Setup a clean output dir ($OUTPUT_DIR)."
rm -rf /var/tmp/cloudapitest
mkdir -p /var/tmp/cloudapitest

cd $TOP

# Generate list of tests
test_files=$(ls -1 test/*.test.js test/plugins/*.test.js)
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi

failed_test_names=
set +o errexit
set -o pipefail
for t in ${test_files}; do
    PATH=${NODE_INSTALL}/bin:${PATH} ${NODE_INSTALL}/bin/node \
        --abort_on_uncaught_exception ${t} | tee -a ${OUTPUT_DIR}/cloudapi.tap
    if [[ $? != 0 ]]; then
        failed_test_names="${failed_test_names} ${t}"
    fi
done
set +o pipefail
set -o errexit

end_time=$(date +%s)
elapsed=$((${end_time} - ${start_time}))

tests=$(grep "^1\.\.[0-9]" ${OUTPUT_DIR}/cloudapi.tap | cut -d '.' -f3 | xargs | tr ' ' '+' | bc)
failed=$(grep "^# fail  [0-9]" ${OUTPUT_DIR}/cloudapi.tap | cut -d ' ' -f4 | xargs | tr ' ' '+' | bc)
skipped=$(grep "^# skip  [0-9]" ${OUTPUT_DIR}/cloudapi.tap | cut -d ' ' -f4 | xargs | tr ' ' '+' | bc)

[[ -z ${tests} ]] && tests=0
[[ -z ${failed} ]] && failed=0
[[ -z ${skipped} ]] && skipped=0

passed=$((${tests} - ${failed} - ${skipped}))

if [[ -t 1 ]]; then
    # We're on a terminal, so use color
    COLOR_GREEN="\033[32m"
    COLOR_RED="\033[31m"
    COLOR_ORANGE="\033[33m"
    COLOR_NORMAL="\033[39m"
else
    # no terminal, no color
    COLOR_GREEN=
    COLOR_RED=
    COLOR_ORANGE=
    COLOR_NORMAL=
fi

# Output the summary
echo "#"
echo "# TESTS COMPLETE IN ${elapsed} SECONDS, SUMMARY:"
echo "#"
echo -e "#   ${COLOR_GREEN}PASS: ${passed} / ${tests}${COLOR_NORMAL}"
if [[ ${skipped} -gt 0 ]]; then
    echo -e "#   ${COLOR_ORANGE}SKIP: ${skipped} / ${tests}${COLOR_NORMAL}"
fi
if [[ ${failed} -gt 0 ]]; then
    echo -e "#   ${COLOR_RED}FAIL: ${failed} / ${tests}${COLOR_NORMAL}"
    echo "#"
    echo "# FAILED TESTS:"
    echo "#"
    for t in ${failed_test_names}; do
        echo "#   - ${t}"
    done
fi
echo "#"

if [[ ${failed} -gt 0 ]]; then
    exit 1
fi

exit 0
